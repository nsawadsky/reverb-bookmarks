{
    "src/testpackage/FieldRefs.java": 
    [ {
      "queryString" : "(+(FieldRefs OR testpackage.FieldRefs))",
      "queryClientInfo" : "FieldRefs"
    }, {
      "queryString" : "(+(testpackage.Fielddecls OR (testpackage AND Fielddecls)) Fielddecls FIELDDECLS_CONSTANT_1 FIELDDECLS_CONSTANT_2) OR (+Fielddecls.FIELDDECLS_CONSTANT_1) OR (+Fielddecls.FIELDDECLS_CONSTANT_2)",
      "queryClientInfo" : "Fielddecls"
    }, {
      "queryString" : "(+(testpackage.Enumvaluedecls OR (testpackage AND Enumvaluedecls)) Enumvaluedecls ENUM_VALUE_1 ENUM_VALUE_2) OR (+Enumvaluedecls.ENUM_VALUE_1) OR (+Enumvaluedecls.ENUM_VALUE_2)",
      "queryClientInfo" : "Enumvaluedecls"
    }, {
      "queryString" : "(+(testpackage.Fielddecls.Innerclassdecl OR (testpackage AND Fielddecls.Innerclassdecl)) Fielddecls.Innerclassdecl FIELDDECLS_CONSTANT_1) OR (+Fielddecls.Innerclassdecl.FIELDDECLS_CONSTANT_1)",
      "queryClientInfo" : "Fielddecls.Innerclassdecl"
    } ],
    
    "src/testpackage/TypeRefs.java":
    [ {
      "queryString" : "(+(TypeRefs OR testpackage.TypeRefs))",
      "queryClientInfo" : "TypeRefs"
    }, {
      "queryString" : "(+(java.io.File OR (java.io AND File)) File)",
      "queryClientInfo" : "File"
    }, {
      "queryString" : "(+(ServerSocket OR java.net.ServerSocket))",
      "queryClientInfo" : "ServerSocket"
    }, {
      "queryString" : "(+(testpackage.Classdecl OR (testpackage AND Classdecl)) Classdecl)",
      "queryClientInfo" : "Classdecl"
    }, {
      "queryString" : "(+(Classdecl.Innerclassdecl OR testpackage.Classdecl.Innerclassdecl))",
      "queryClientInfo" : "Classdecl.Innerclassdecl"
    }, {
      "queryString" : "(+(ClassdeclNores OR testpackage.ClassdeclNores))",
      "queryClientInfo" : "ClassdeclNores"
    } ],
    
    "src/testpackage/ComplexTypeRefs.java":
    [ {
      "queryString" : "(+(ComplexTypeRefs OR testpackage.ComplexTypeRefs))",
      "queryClientInfo" : "ComplexTypeRefs"
    }, {
      "queryString" : "(+(java.util.List OR (java.util AND List)) List)",
      "queryClientInfo" : "List"
    }, {
      "queryString" : "(+(java.io.File OR (java.io AND File)) File)",
      "queryClientInfo" : "File"
    }, {
      "queryString" : "(+(java.util.UUID OR (java.util AND UUID)) UUID)",
      "queryClientInfo" : "UUID"
    } ],
        
    "src/testpackage/Enumdecl.java":
    [ {
      "queryString" : "(+(testpackage.Enumdecl OR (testpackage AND Enumdecl)) Enumdecl)",
      "queryClientInfo" : "Enumdecl"
    } ],

    "src/testpackage/EnumdeclNores.java":
    [ {
      "queryString" : "(+(EnumdeclNores OR testpackage.EnumdeclNores))",
      "queryClientInfo" : "EnumdeclNores"
    } ],
    
    "src/testpackage/Classdecl.java":
    [ {
      "queryString" : "(+(testpackage.Classdecl OR (testpackage AND Classdecl)) Classdecl)",
      "queryClientInfo" : "Classdecl"
    }, {
      "queryString" : "(+(Classdecl.Innerclassdecl OR testpackage.Classdecl.Innerclassdecl))",
      "queryClientInfo" : "Classdecl.Innerclassdecl"
    } ],
   
   "src/testpackage/ClassdeclNores.java": 
    [ {
      "queryString" : "(+(ClassdeclNores OR testpackage.ClassdeclNores))",
      "queryClientInfo" : "ClassdeclNores"
    } ],
        
    "src/testpackage/Methoddecl.java":
    [ {
      "queryString" : "(+(testpackage.Methoddecl OR (testpackage AND Methoddecl)) Methoddecl)",
      "queryClientInfo" : "Methoddecl"
    }, {
      "queryString" : "(+(testpackage.Derivedclassdecl OR (testpackage AND Derivedclassdecl)) Derivedclassdecl derivedclassdeclMethod)",
      "queryClientInfo" : "Derivedclassdecl derivedclassdeclMethod"
    }, {
      "queryString" : "(+(testpackage.Interfacedecl OR (testpackage AND Interfacedecl)) Interfacedecl interfaceDeclMethod)",
      "queryClientInfo" : "Interfacedecl interfaceDeclMethod"
    }, {
      "queryString" : "(+(InterfacedeclNores OR testpackage.InterfacedeclNores) interfacedeclNoresMethod)",
      "queryClientInfo" : "InterfacedeclNores interfacedeclNoresMethod"
    }, {
      "queryString" : "(+(testpackage.Baseclassdecl OR (testpackage AND Baseclassdecl)) Baseclassdecl baseclassdeclMethod)",
      "queryClientInfo" : "Baseclassdecl baseclassdeclMethod"
    }, {
      "queryString" : "(+(testpackage.Baseinterfacedecl OR (testpackage AND Baseinterfacedecl)) Baseinterfacedecl baseinterfacedeclMethod)",
      "queryClientInfo" : "Baseinterfacedecl baseinterfacedeclMethod"
    } ],
    
    "src/testpackage/MethodInvoc.java":
    [ {
      "queryString" : "(+(MethodInvoc OR testpackage.MethodInvoc))",
      "queryClientInfo" : "MethodInvoc"
    }, {
      "queryString" : "(+(testpackage.Methoddecl OR (testpackage AND Methoddecl)) Methoddecl methoddeclMethod baseclassdeclMethod staticMethod) OR (+Methoddecl.staticMethod)",
      "queryClientInfo" : "Methoddecl methoddeclMethod baseclassdeclMethod staticMethod"
    }, {
      "queryString" : "(+(MethoddeclNores OR testpackage.MethoddeclNores) methoddeclNoresMethod)",
      "queryClientInfo" : "MethoddeclNores methoddeclNoresMethod"
    }, {
      "queryString" : "(+UnknownType)",
      "queryClientInfo" : "UnknownType"
    }, {
      "queryString" : "(+methoddeclNores)",
      "queryClientInfo" : "methoddeclNores"
    } ],
    
    "src/testpackage/PrimitiveRefs.java":
    [ {
      "queryString" : "(+(PrimitiveRefs OR testpackage.PrimitiveRefs))",
      "queryClientInfo" : "PrimitiveRefs"
    } ],
    
    "src/testpackage/AnnotationRefs.java":
    [ {
      "queryString" : "(+(AnnotationRefs OR testpackage.AnnotationRefs))",
      "queryClientInfo" : "AnnotationRefs"
    }, {
      "queryString" : "(+(testpackage.Baseclassdecl OR (testpackage AND Baseclassdecl)) Baseclassdecl baseclassdeclMethod)",
      "queryClientInfo" : "Baseclassdecl baseclassdeclMethod"
    }, {
      "queryString" : "(+(testpackage.Annotationdecl OR (testpackage AND Annotationdecl)) Annotationdecl)",
      "queryClientInfo" : "Annotationdecl"
    } ]      
}
